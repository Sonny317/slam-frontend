{"ast":null,"code":"import axios from './axios';\n\n// 기존 로그인 함수 유지\nexport const login = async (email, password) => {\n  try {\n    const response = await axios.post('/auth/login', {\n      email,\n      password\n    });\n    const token = response.data.token;\n    localStorage.setItem('jwtToken', token);\n    axios.defaults.headers.common['Authorization'] = `Bearer ${token}`;\n    return response.data;\n  } catch (error) {\n    var _error$response;\n    throw ((_error$response = error.response) === null || _error$response === void 0 ? void 0 : _error$response.data) || error;\n  }\n};\n\n// ✅ 회원가입 함수 추가\nexport const register = async (email, password, code, role = \"USER\") => {\n  try {\n    const response = await axios.post(\"/auth/register\", {\n      email,\n      password,\n      code,\n      // ✅ 인증코드 추가\n      role\n    });\n    return response.data;\n  } catch (error) {\n    var _error$response2;\n    throw ((_error$response2 = error.response) === null || _error$response2 === void 0 ? void 0 : _error$response2.data) || error.message || \"회원가입 실패\";\n  }\n};","map":{"version":3,"names":["axios","login","email","password","response","post","token","data","localStorage","setItem","defaults","headers","common","error","_error$response","register","code","role","_error$response2","message"],"sources":["C:/slam_frontend/src/api/auth.js"],"sourcesContent":["import axios from './axios';\r\n\r\n// 기존 로그인 함수 유지\r\nexport const login = async (email, password) => {\r\n  try {\r\n    const response = await axios.post('/auth/login', {\r\n      email,\r\n      password,\r\n    });\r\n\r\n    const token = response.data.token;\r\n    localStorage.setItem('jwtToken', token);\r\n    axios.defaults.headers.common['Authorization'] = `Bearer ${token}`;\r\n\r\n    return response.data;\r\n  } catch (error) {\r\n    throw error.response?.data || error;\r\n  }\r\n};\r\n\r\n// ✅ 회원가입 함수 추가\r\nexport const register = async (email, password, code, role = \"USER\") => {\r\n  try {\r\n    const response = await axios.post(\"/auth/register\", {\r\n      email,\r\n      password,\r\n      code,    // ✅ 인증코드 추가\r\n      role,\r\n    });\r\n    return response.data;\r\n  } catch (error) {\r\n    throw error.response?.data || error.message || \"회원가입 실패\";\r\n  }\r\n};\r\n\r\n"],"mappings":"AAAA,OAAOA,KAAK,MAAM,SAAS;;AAE3B;AACA,OAAO,MAAMC,KAAK,GAAG,MAAAA,CAAOC,KAAK,EAAEC,QAAQ,KAAK;EAC9C,IAAI;IACF,MAAMC,QAAQ,GAAG,MAAMJ,KAAK,CAACK,IAAI,CAAC,aAAa,EAAE;MAC/CH,KAAK;MACLC;IACF,CAAC,CAAC;IAEF,MAAMG,KAAK,GAAGF,QAAQ,CAACG,IAAI,CAACD,KAAK;IACjCE,YAAY,CAACC,OAAO,CAAC,UAAU,EAAEH,KAAK,CAAC;IACvCN,KAAK,CAACU,QAAQ,CAACC,OAAO,CAACC,MAAM,CAAC,eAAe,CAAC,GAAG,UAAUN,KAAK,EAAE;IAElE,OAAOF,QAAQ,CAACG,IAAI;EACtB,CAAC,CAAC,OAAOM,KAAK,EAAE;IAAA,IAAAC,eAAA;IACd,MAAM,EAAAA,eAAA,GAAAD,KAAK,CAACT,QAAQ,cAAAU,eAAA,uBAAdA,eAAA,CAAgBP,IAAI,KAAIM,KAAK;EACrC;AACF,CAAC;;AAED;AACA,OAAO,MAAME,QAAQ,GAAG,MAAAA,CAAOb,KAAK,EAAEC,QAAQ,EAAEa,IAAI,EAAEC,IAAI,GAAG,MAAM,KAAK;EACtE,IAAI;IACF,MAAMb,QAAQ,GAAG,MAAMJ,KAAK,CAACK,IAAI,CAAC,gBAAgB,EAAE;MAClDH,KAAK;MACLC,QAAQ;MACRa,IAAI;MAAK;MACTC;IACF,CAAC,CAAC;IACF,OAAOb,QAAQ,CAACG,IAAI;EACtB,CAAC,CAAC,OAAOM,KAAK,EAAE;IAAA,IAAAK,gBAAA;IACd,MAAM,EAAAA,gBAAA,GAAAL,KAAK,CAACT,QAAQ,cAAAc,gBAAA,uBAAdA,gBAAA,CAAgBX,IAAI,KAAIM,KAAK,CAACM,OAAO,IAAI,SAAS;EAC1D;AACF,CAAC","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}